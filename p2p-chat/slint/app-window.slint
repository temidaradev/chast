import { Button, VerticalBox, HorizontalBox, LineEdit, TextEdit, ScrollView, ListView } from "std-widgets.slint";

export struct ChatMessage {
    username: string,
    content: string,
    timestamp: string,
    is-own: bool,
    is-system: bool,
}

export struct ChatFileItem {
    file_path: string,
    display_name: string,
    last_modified: string,
    size_display: string,
    selected: bool,
}

export component StartWindow inherits Window {
    title: "Chast - P2P Chat";
    width: 800px;
    height: 600px;
    background: #1a1a1a;
    
    callback switch-to-join-window;
    callback switch-to-create-window;
    
    GridLayout {
        padding-left: 200px;
        padding-right: 200px;
        padding-top: 200px;
        padding-bottom: 200px;
        spacing: 20px;
        
        Row {
            Text {
                text: "Chast";
                horizontal-alignment: center;
                font-size: 48px;
                font-weight: 900;
                color: #00ff88;
            }
        }
        
        Row {
            Text {
                text: "Peer-to-Peer Chat";
                horizontal-alignment: center;
                font-size: 16px;
                color: #888;
            }
        }
        
        Row {
            VerticalBox {
                spacing: 15px;
                
                Button {
                    text: "Create Room";
                    height: 50px;
                    clicked => { switch-to-create-window(); }
                }
                
                Button {
                    text: "Join Room";
                    height: 50px;
                    clicked => { switch-to-join-window(); }
                }
            }
        }
    }
}

export component JoinWindow inherits Window {
    width: 800px;
    height: 600px;
    background: #1a1a1a;
    title: "Join P2P Chat Room";
    
    callback switch-to-chat-window(string /* username */, string /* peer-id */);
    callback switch-to-start-window;
    
    in-out property<string> username: "";
    in-out property<string> peer-id: "";
    
    GridLayout {
        padding-left: 200px;
        padding-right: 200px;
        padding-top: 150px;
        padding-bottom: 150px;
        spacing: 25px;
        
        Row {
            Text {
                text: "Join Room";
                horizontal-alignment: center;
                font-size: 32px;
                color: #0088ff;
                font-weight: 700;
            }
        }
        
        Row {
            LineEdit {
                text: username;
                placeholder-text: "Enter your username";
                horizontal-alignment: center;
                height: 40px;
                edited(text) => {
                    username = text;
                }
            }
        }
        
        Row {
            LineEdit {
                text: peer-id;
                horizontal-alignment: center;
                placeholder-text: "Enter peer ID or room code";
                height: 40px;
                edited(text) => {
                    peer-id = text;
                }
            }
        }
        
        Row {
            HorizontalBox {
                spacing: 10px;
                
                Button {
                    text: "Back";
                    height: 40px;
                    clicked => { switch-to-start-window(); }
                }
                
                Button {
                    text: "Join Room";
                    height: 40px;
                    clicked => { 
                        if (username != "" && peer-id != "") {
                            switch-to-chat-window(username, peer-id);
                        }
                    }
                }
            }
        }
    }
}

export component CreateWindow inherits Window {
    width: 800px;
    height: 600px;
    background: #1a1a1a;
    title: "Create P2P Chat Room";
    
    callback switch-to-chat-window(string /* username */);
    callback switch-to-start-window;
    
    in-out property<string> username: "";
    
    GridLayout {
        padding-left: 200px;
        padding-right: 200px;
        padding-top: 150px;
        padding-bottom: 150px;
        spacing: 25px;
        
        Row {
            Text {
                text: "Create Room";
                horizontal-alignment: center;
                font-size: 32px;
                color: #00ff88;
                font-weight: 700;
            }
        }
        
        Row {
            LineEdit {
                text: username;
                placeholder-text: "Enter your username";
                horizontal-alignment: center;
                height: 40px;
                edited(text) => {
                    username = text;
                }
            }
        }
        
        Row {
            VerticalBox {
                Button {
                    text: "Back";
                    height: 40px;
                    clicked => { switch-to-start-window(); }
                }
                
                Button {
                    text: "Create Room";
                    height: 40px;
                    clicked => { 
                        if (username != "") {
                            switch-to-chat-window(username);
                        }
                    }
                }
            }
        }
    }
}

export component ChatSaveDialog inherits Dialog {
    in property <[ChatFileItem]> saved_chats;
    in property <string> save_status: "";
    
    callback restore_chat_selected(string /* file_path */);
    callback open_file_explorer();
    callback auto_save_toggled(bool);
    callback close_dialog();

    preferred-width: 600px;
    preferred-height: 500px;
    
    VerticalBox {
        spacing: 10px;
        
        Text {
            text: "Chat Save & Restore";
            font-size: 18px;
            font-weight: 700;
            horizontal-alignment: center;
            color: white;
        }
        
        HorizontalBox {
            spacing: 10px;
            alignment: center;
            
            Text { 
                text: "Auto-save chats:"; 
                vertical-alignment: center;
                color: white;
            }
            
            Button {
                text: "📁 Browse Files...";
                clicked => {
                    root.open_file_explorer();
                }
            }
        }
        
        if save_status != "" : Text {
            text: save_status;
            color: #00ff88;
            horizontal-alignment: center;
        }
        
        Rectangle {
            background: #2a2a2a;
            border-radius: 8px;
            border-width: 1px;
            border-color: #444;
            
            VerticalBox {
                padding: 10px;
                
                Text {
                    text: "Recent Saved Chats";
                    font-weight: 700;
                    color: white;
                    font-size: 14px;
                }
                
                ScrollView {
                    height: 300px;
                    
                    VerticalBox {
                        spacing: 5px;
                        
                        for chat_file in saved_chats : Rectangle {
                            background: chat_file.selected ? #00ff8822 : #333;
                            border-radius: 4px;
                            height: 80px;
                            
                            HorizontalBox {
                                padding: 10px;
                                spacing: 15px;
                                
                                VerticalBox {
                                    spacing: 2px;
                                    
                                    Text {
                                        text: chat_file.display_name;
                                        font-weight: 600;
                                        color: white;
                                        font-size: 12px;
                                    }
                                    
                                    Text {
                                        text: "📅 " + chat_file.last_modified;
                                        font-size: 10px;
                                        color: #888;
                                    }
                                    
                                    Text {
                                        text: "💾 " + chat_file.size_display;
                                        font-size: 10px;
                                        color: #888;
                                    }
                                }
                                
                                Button {
                                    text: "🔄 Restore";
                                    preferred-width: 100px;
                                    clicked => {
                                        root.restore_chat_selected(chat_file.file_path);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        HorizontalBox {
            spacing: 10px;
            alignment: end;
            
            Button {
                text: "Close";
                clicked => {
                    root.close_dialog();
                }
            }
        }
    }
}

export component ChatWindow inherits Window {
    width: 800px;
    height: 600px;
    background: #1a1a1a;
    title: "P2P Chat";
    
    callback send-message(string /* message */);
    callback disconnect();
    callback show-chat-save-dialog();
    callback restore-chat-from-path(string);
    callback open-file-explorer-for-restore();
    callback toggle-auto-save(bool);
    callback refresh-saved-chats();
    
    in-out property<string> current-message: "";
    in-out property<string> current-username: "";
    in-out property<string> connection-status: "Disconnected";
    in-out property<[ChatMessage]> messages: [];
    in-out property<[string]> online-users: [];
    in-out property<bool> show-save-dialog: false;
    in property<[ChatFileItem]> saved-chats: [];
    in property<string> save-status: "";
    
    HorizontalBox {
        spacing: 10px;
        padding: 10px;
        
        Rectangle {
            width: 200px;
            background: #2a2a2a;
            border-radius: 8px;
            
            VerticalBox {
                padding: 10px;
                spacing: 10px;
                
                Text {
                    text: "Online Users";
                    font-weight: 700;
                    font-size: 16px;
                }
                
                Rectangle {
                    height: 2px;
                    background: #444;
                }
                
                ScrollView {
                    VerticalBox {
                        for user in online-users: Rectangle {
                            height: 30px;
                            background: user == current-username ? #00ff8844 : transparent;
                            border-radius: 4px;
                            
                            Text {
                                text: user;
                                vertical-alignment: center;
                                horizontal-alignment: left;
                                x: 8px;
                            }
                        }
                    }
                }
            }
        }
        
        VerticalBox {
            
            Rectangle {
                height: 55px;
                background: #2d2d2d;
                border-radius: 10px;
                
                HorizontalBox {
                    padding: 15px;
                    spacing: 12px;
                    alignment: space-between;
                    
                    Rectangle {
                        background: connection-status == "Connected" ? #00ff8815 : 
                                   connection-status == "Connecting" ? #ff880015 : #ff444415;
                        border-color: connection-status == "Connected" ? #00ff8840 : 
                                     connection-status == "Connecting" ? #ff880040 : #ff444440;
                        border-width: 1px;
                        border-radius: 14px;
                        height: 28px;
                        min-width: 100px;
                        y: (parent.height - self.height) / 2;
                        
                        HorizontalBox {
                            padding: 8px;
                            spacing: 6px;
                            alignment: center;
                            
                            Text {
                                text: connection-status;
                                font-size: 10px;
                                font-weight: 600;
                                color: white;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                            }
                        }
                    }
                    
                    Rectangle {
                        width: 85px;
                        height: 28px;
                        background: #444;
                        border-radius: 14px;
                        y: (parent.height - self.height) / 2;
                        
                        TouchArea {
                            clicked => { 
                                refresh-saved-chats();
                                show-save-dialog = true;
                            }
                            
                            Rectangle {
                                width: 100%;
                                height: 100%;
                                background: parent.pressed ? #555 : parent.has-hover ? #4a4a4a : transparent;
                                border-radius: 14px;
                                
                                Text {
                                    text: "💾 Save";
                                    color: #00ff88;
                                    font-size: 10px;
                                    font-weight: 600;
                                    horizontal-alignment: center;
                                    vertical-alignment: center;
                                }
                            }
                        }
                    }
                    
                    Rectangle {
                        width: 85px;
                        height: 28px;
                        background: #444;
                        border-radius: 14px;
                        y: (parent.height - self.height) / 2;
                        
                        TouchArea {
                            clicked => { disconnect(); }
                            
                            Rectangle {
                                width: 100%;
                                height: 100%;
                                background: parent.pressed ? #555 : parent.has-hover ? #4a4a4a : transparent;
                                border-radius: 14px;
                                
                                Text {
                                    text: "Disconnect";
                                    color: #ff6666;
                                    font-size: 10px;
                                    font-weight: 600;
                                    horizontal-alignment: center;
                                    vertical-alignment: center;
                                }
                            }
                        }
                    }
                }
            }
            
            ScrollView {
                VerticalBox {
                    spacing: 3px;
                    
                    for message in messages: Rectangle {
                        background: message.is-own ? #00ff8822 : 
                                   message.is-system ? #444444 : #333;
                        border-radius: 8px;
                        
                        VerticalBox {
                            padding: 4px;
                            spacing: 1px;
                            
                            HorizontalBox {
                                Text {
                                    text: message.username;
                                    color: message.is-own ? #00ff88 : 
                                           message.is-system ? #ffaa00 : #0088ff;
                                    font-weight: 600;
                                    font-size: 11px;
                                }
                                
                                Text {
                                    text: message.timestamp;
                                    color: #666;
                                    font-size: 9px;
                                    horizontal-alignment: right;
                                }
                            }
                            
                            if message.is-system: TextEdit {
                                text: message.content;
                                font-size: 11px;
                                read-only: true;
                                wrap: word-wrap;
                                width: 100%;
                            }
                            
                            if !message.is-system: Text {
                                text: message.content;
                                color: white;
                                font-size: 13px;
                                wrap: word-wrap;
                            }
                        }
                    }
                }
            }
            
            HorizontalBox {
                spacing: 10px;
                height: 50px;
                
                LineEdit {
                    text: current-message;
                    placeholder-text: "Type your message...";
                    edited(text) => {
                        current-message = text;
                    }
                    accepted => {
                        if (current-message != "") {
                            send-message(current-message);
                            current-message = "";
                            self.text = "";
                        }
                    }
                }
            }
        }
    }
    
    if show-save-dialog : ChatSaveDialog {
        saved-chats: root.saved-chats;
        save-status: root.save-status;
        
        restore-chat-selected(file-path) => {
            root.restore-chat-from-path(file-path);
            root.show-save-dialog = false;
        }
        
        open-file-explorer() => {
            root.open-file-explorer-for-restore();
        }
        
        auto-save-toggled(enabled) => {
            root.toggle-auto-save(enabled);
        }
        
        close-dialog() => {
            root.show-save-dialog = false;
        }
    }
}
